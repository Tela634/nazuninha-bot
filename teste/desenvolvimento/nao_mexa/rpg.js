/*
 SISTEMA DE RPG - V1
 CRIADOR: HIUDY
 
 AVISO, ESSE SCRIPT FOI CRIADO DO ZERO POR MIM (HIUDY), N√ÉO VAZE OU VENDA ESSE SCRIPT SEM A MINHA PERMISS√ÉO, CASO FOR MELHORAR/MODIFICAR O CODIGO N√ÉO TIRE OS MEUS CR√âDITOS.
*/

// IMPORTA√á√ïES
const path = require('path');
const fs = require('fs').promises;

//TEMPOR√ÅRIO PARA DELAY :)
let delay = {};

// DIRET√ìRIO DO RPG
const RpgPath = path.join(__dirname, './../dados/database/rpg');

// CRIAR PASTA DE RPG (CASO N√ÉO EXISTA)
fs.mkdir(RpgPath, { recursive: true }).catch(console.error);

//EMPREGOS
const empregos = [
    { nome: 'lixeiro', salarioMin: 50, salarioMax: 150, xpNecessaria: 0, delay: 'Sua pr√≥xima rota de coleta de lixos so acontece daqui #segundos# segundos.' },
    { nome: 'faxineiro', salarioMin: 80, salarioMax: 200, xpNecessaria: 20, delay: 'O pr√©dio esta limpo por agora, v√° descansar um pouco, volte daqui #segundos# segundos.' },
    { nome: 'garcom', salarioMin: 100, salarioMax: 250, xpNecessaria: 40, delay: 'Esta na sua hora de descanso, outro gar√ßom esta servindo os pratos, volte daqui #segundos# segundos para trabalhar novamente.' },
    { nome: 'motorista', salarioMin: 150, salarioMax: 300, xpNecessaria: 80, delay: 'Seu pr√≥ximo hor√°rio de sa√≠da √© so daqui #segundos# segundos.' },
    { nome: 'vendedor', salarioMin: 200, salarioMax: 400, xpNecessaria: 100, delay: 'Voce est√° sem pe√ßas dispon√≠veis para venda, sua pr√≥xima entrega de produtos chega daqui #segundos# segundos.' },
    { nome: 'cozinheiro', salarioMin: 250, salarioMax: 500, xpNecessaria: 150, delay: 'Voce j√° esta cozinhando a muito tempo, v√° descansar um pouco, volte daqui #segundos# segundos, o seu bra√ßo direito cuida da cozinha enquanto isso.' },
    { nome: 'professor', salarioMin: 300, salarioMax: 600, xpNecessaria: 180, delay: 'Sua pr√≥xima aula so come√ßa daqui #segundos# segundos.' },
    { nome: 'engenheiro', salarioMin: 400, salarioMax: 800, xpNecessaria: 250, delay: 'Voce n√£o tem nada para fazer no momento, volte daqui #segundos# segundos para mais trabalho.' },
    { nome: 'policial', salarioMin: 450, salarioMax: 900, xpNecessaria: 350, delay: 'Seu turno so come√ßa daqui #segundos# segundos.' },
    { nome: 'advogado', salarioMin: 500, salarioMax: 1000, xpNecessaria: 450, delay: 'O caso de seu cliente so ir√° a julgamento daqui #segundos# segundos.' },
    { nome: 'medico', salarioMin: 600, salarioMax: 1200, xpNecessaria: 600, delay: 'Voce est√° no seu hor√°rio de descanso, apenas aproveite e volte daqui #segundos# segundos, e tor√ßa para n√£o chegar nenhuma emerg√™ncia' },
];

//ITEM DA LOJA || ITENS COM VENDA ACEITA
const itensLoja = [
    { nome: 'picareta', valor: 700, venda: 300 },
    { nome: 'isca', valor: 800, venda: 320 },
    { nome: 'faca', valor: 900, venda: 350 },
    { nome: 'arma', valor: 1100, venda: 480 },
    { nome: 'municao', valor: 300, venda: 80 },
    { nome: 'computador', valor: 1300, venda: 600 },
    { nome: 'racao', valor: 150, venda: 50 },
    { nome: 'escudo', valor: 1450, venda: 760 }
];
const itensVenda = [
    { nome: 'carvao', venda: 50 },
    { nome: 'prata', venda: 70 },
    { nome: 'ferro', venda: 80 },
    { nome: 'ouro', venda: 95 },
    { nome: 'diamante', venda: 115 },
    { nome: 'esmeralda', venda: 130 },
    { nome: 'peixe', venda: 40 },
    { nome: 'peixes', venda: 40 },
    { nome: 'carne', venda: 30 },
    { nome: 'carnes', venda: 30 }
];

//FUN√á√ÉO QUE RETORNA A LOJA
async function GerarLoja() {
 try {
 let textLoja = `- *üõí NAZU MARKET üõí*\n`;
 for(item of itensLoja) {
 textLoja += `\n- ${item.nome} (R$${item.valor})`;
 };
 textLoja += `\n\n> Para realizar a compra utilize o comando #prefix#comprar [Nome do item]\n> Exemplo: #prefix#comprar picareta`;
 return {message: textLoja};
 } catch (e) {
 console.error(e);
 return false;
}
};

// FUN√á√ÉO DE REGISTRAR USU√ÅRIO
async function rgUser(sender, name = "") {
    try {
        const userPath = path.join(RpgPath, `${sender}.json`);
        const saldo = { banco: 0, carteira: 0 };
        const object = {
            id: sender,
            nome: name,
            saldo: saldo,
            inventario: {}
        };
        await fs.writeFile(userPath, JSON.stringify(object, null, '\t'));
        return true;
    } catch (e) {
        console.error(e);
        return false;
    }
}

// FUN√á√ÉO DE PEGAR INFORMA√á√ïES DO USU√ÅRIO
async function getUser(sender) {
    try {
        const userPath = path.join(RpgPath, `${sender}.json`);
        if (await fs.access(userPath).then(() => true).catch(() => false)) {
            const userDados = JSON.parse(await fs.readFile(userPath, 'utf-8'));
            return userDados;
        } else {
            return false;
        }
    } catch (e) {
        console.error(e);
        return false;
    }
}

// FUN√á√ÉO UTILIT√ÅRIA: SALVAR USU√ÅRIO
async function saveUser(sender, dadosUser) {
    try {
        const userPath = path.join(RpgPath, `${sender}.json`);
        await fs.writeFile(userPath, JSON.stringify(dadosUser, null, '\t'));
        return true;
    } catch (e) {
        console.error(e);
        return false;
    }
}

// ADICIONAR SALDO NA CARTEIRA
async function addSaldo(sender, value) {
    if (typeof sender === "undefined" || typeof value === "undefined") {
        return "Uso: saldo.add(<sender>, <valor>) - Adiciona saldo √† carteira do usu√°rio.";
    }
    try {
        const dadosUser = await getUser(sender);
        if (!dadosUser || !Number(value)) return false;
        dadosUser.saldo.carteira += Number(value);
        return await saveUser(sender, dadosUser);
    } catch (e) {
        console.error(e);
        return false;
    }
}

// DELETAR SALDO DA CARTEIRA
async function delSaldo(sender, value) {
    return addSaldo(sender, -value);
}

// ADICIONAR SALDO NO BANCO
async function addSaldoBank(sender, value) {
    if (typeof sender === "undefined" || typeof value === "undefined") {
        return "Uso: banco.add(<sender>, <valor>) - Adiciona saldo ao banco do usu√°rio.";
    }
    try {
        const dadosUser = await getUser(sender);
        if (!dadosUser || !Number(value)) return false;
        dadosUser.saldo.banco += Number(value);
        return await saveUser(sender, dadosUser);
    } catch (e) {
        console.error(e);
        return false;
    }
}

// DELETAR SALDO NO BANCO
async function delSaldoBank(sender, value) {
    return addSaldoBank(sender, -value);
}

// ADICIONAR ITEM NO INVENTARIO
async function addItem(sender, itemName, quantity = 1) {
    if (!itemName || !quantity) {
        return "Uso: inventario.add(<sender>, <item>, <quantidade>) - Adiciona itens ao invent√°rio.";
    }
    try {
        const dadosUser = await getUser(sender);
        if (!dadosUser) return false;
        if (!dadosUser.inventario[itemName]) dadosUser.inventario[itemName] = 0;
        dadosUser.inventario[itemName] += quantity;
        await saveUser(sender, dadosUser);
        return true;
    } catch (e) {
        console.error(e);
        return false;
    }
}

//REMOVER ITEM DO INVENT√ÅRIO
async function removeItem(sender, itemName, quantity = 1) {
    if (!itemName || !quantity) {
        return "Uso: inventario.remove(<sender>, <item>, <quantidade>) - Remove itens do invent√°rio.";
    }
    try {
        const dadosUser = await getUser(sender);
        if (!dadosUser || !dadosUser.inventario[itemName]) return false;
        dadosUser.inventario[itemName] -= quantity;
        if (dadosUser.inventario[itemName] <= 0) {
            delete dadosUser.inventario[itemName];
        }
        await saveUser(sender, dadosUser);
        return true;
    } catch (e) {
        console.error(e);
        return false;
    }
}

//EXCLUIR REGISTRO DE USU√ÅRIO
async function delUser(sender) {
try {
 const userPath = path.join(RpgPath, `${sender}.json`);
 if(require('fs').existsSync(userPath)) {
  await require('fs').unlinkSync(userPath);
  return true
 } else {
  return true;
 };
} catch (e) {
 console.error(e);
 return false;
}};

//PEGAR LISTA DE EMPREGOS
async function listarEmpregos(sender) {
    try {
    const dadosUser = await getUser(sender);
    if (!dadosUser) return false;
    if (!dadosUser.xpEmprego) dadosUser.xpEmprego = 0;
    const disponiveis = empregos.filter(e => dadosUser.xpEmprego >= e.xpNecessaria).map(e => e.nome);
    const bloqueados = empregos.filter(e => dadosUser.xpEmprego < e.xpNecessaria).map(e => e.nome);
    return { disponiveis, bloqueados };
    } catch (e) {
 console.error(e);
 return false;
}
};

//SE DEMITIR DO EMPREGO
async function sairEmprego(sender) {
try {
    const dadosUser = await getUser(sender);
    if (!dadosUser) return false;
    if (!dadosUser.emprego || dadosUser.emprego === "desempregado") return {message: 'Voce ja esta desempregado vagabundo.'};
    dadosUser.emprego = "desempregado";
    await saveUser(sender, dadosUser);
    return {message: "Prontinho voc√™ saiu do seu emprego, agora voltou a ser um vagabundo."};
    } catch (e) {
 console.error(e);
 return false;
}
};

//ENTRAR EM UM EMPREGO
async function entrarEmprego(sender, emprego) {
try {
    const dadosUser = await getUser(sender);
    if (!dadosUser) return false;
    const empregoData = empregos.find(e => e.nome === emprego);
    if (!empregoData) return {message: `Emprego inv√°lido, utilize o comando empregos para ver os empregos dispon√≠veis`};
    if(!dadosUser.xpEmprego) dadosUser.xpEmprego = 0;
    if (dadosUser.xpEmprego < empregoData.xpNecessaria) {
        return {message: `Infelizmente eles n√£o quiseram lhe contratar, disseram que voc√™ nao tem experi√™ncia o suficiente para um cargo deste n√≠vel.`};
    };
    dadosUser.emprego = emprego;
    await saveUser(sender, dadosUser);
    return {message: `Parab√©ns! Voc√™ agora est√° trabalhando como ${emprego}, Voc√™ nao √© mais um vagabundo fudido ü•≥.`};
    } catch (e) {
 console.error(e);
 return false;
}
};

//FUN√á√ÉO DE TRABALHAR (ALGUEM ME MATA PFV üò≠)
async function trabalhar(sender) {
const dadosUser = await getUser(sender);
if (!dadosUser) return false;
if (dadosUser.emprego === "desempregado") return {message: 'Desde quando desempregado trabalha? vai procurar um emprego vagabundo'};
const empregoData = empregos.find(e => e.nome === dadosUser.emprego);
if (!empregoData) return false;

let now = Date.now();

if (delay[sender] && delay[sender]['trabalhar']) {
let remainingTime = delay[sender]['trabalhar'] - now;
if (remainingTime > 0) return {message: empregoData.delay.replaceAll("#segundos#", String(Math.ceil(remainingTime / 1000)))};
};

try {
let salario = 0;
let textoTrabalho = "";
const chance = Math.random() * 100;

switch (dadosUser.emprego) {
case "lixeiro":
if (chance > 30) {
salario = Math.floor(Math.random() * (empregoData.salarioMax - empregoData.salarioMin)) + empregoData.salarioMin;
textoTrabalho = `Voc√™ recolheu toneladas de lixo e manteve as ruas limpas. Recebeu R$${salario}!`;
} else if (chance > 7) {
textoTrabalho = "O caminh√£o de lixo quebrou hoje, e voc√™ n√£o conseguiu trabalhar.";
} else {
salario = Math.floor(Math.random() * 140) + 100;
textoTrabalho = `Sorte grande! Enquanto vasculhava o lixo, encontrou uma joia e vendeu por R$${salario}.`;
}
break;
            
case "faxineiro":
if (chance > 30) {
salario = Math.floor(Math.random() * (empregoData.salarioMax - empregoData.salarioMin)) + empregoData.salarioMin;
textoTrabalho = `Voc√™ deixou tudo brilhando enquanto limpava o pr√©dio. Ganhou R$${salario} pelo excelente trabalho!`;
} else if (chance > 7) {
textoTrabalho = "Voc√™ escorregou no sab√£o teve que ir para o hospital e acabou n√£o conseguindo limpar nada hoje.";
} else {
salario = Math.floor(Math.random() * 150) + 100;
textoTrabalho = `Voc√™ encontrou dinheiro escondido enquanto limpava um arm√°rio e ganhou R$${salario} extras!`;
}
break;

case "garcom":
if (chance > 30) {
salario = Math.floor(Math.random() * (empregoData.salarioMax - empregoData.salarioMin)) + empregoData.salarioMin;
textoTrabalho = `Voc√™ atendeu v√°rios clientes e recebeu muitas gorjetas. Sal√°rio do dia: R$${salario}.`;
} else if (chance > 7) {
textoTrabalho = "Um cliente reclamou do servi√ßo, e voc√™ n√£o ganhou nada hoje.";
} else {
salario = Math.floor(Math.random() * 180) + 200;
textoTrabalho = `Sorte grande! Um cliente rico deixou uma gorjeta enorme, e voc√™ ganhou R$${salario}!`;
}
break;

case "motorista":
if (chance > 30) {
salario = Math.floor(Math.random() * (empregoData.salarioMax - empregoData.salarioMin)) + empregoData.salarioMin;
textoTrabalho = `Voc√™ transportou v√°rias pessoas com seguran√ßa e recebeu R$${salario} pelo servi√ßo.`;
} else if (chance > 7) {
textoTrabalho = "Voce teve um pneu furado no meio do caminho e perdeu o dia de trabalho.";
} else {
salario = Math.floor(Math.random() * 200) + 200;
textoTrabalho = `Sorte grande! Voc√™ foi contratado para uma viagem especial e ganhou R$${salario}!`;
}
break;

case "vendedor":
if (chance > 30) {
salario = Math.floor(Math.random() * (empregoData.salarioMax - empregoData.salarioMin)) + empregoData.salarioMin;
textoTrabalho = `Voc√™ vendeu muitos produtos e bateu a meta! Recebeu R$${salario}.`;
} else if (chance > 7) {
textoTrabalho = "Foi um dia dif√≠cil, nenhum cliente quis comprar nada.";
} else {
salario = Math.floor(Math.random() * 250) + 300;
textoTrabalho = `Sorte grande! Voc√™ fechou uma venda enorme e ganhou R$${salario}!`;
}
break;
            
case "cozinheiro":
if (chance > 30) {
salario = Math.floor(Math.random() * (empregoData.salarioMax - empregoData.salarioMin)) + empregoData.salarioMin;
textoTrabalho = `O restaurante estava muito movimentado hoje, voc√™ cozinhou v√°rios pratos e recebeu R$${salario}.`;
} else if (chance > 7) {
textoTrabalho = "Seu chefe esta treinando um chefe substituto por isso voc√™ n√£o foi trabalhar hoje e n√£o recebeu nada.";
} else {
salario = Math.floor(Math.random() * 280) + 300;
textoTrabalho = `Sorte grande! Um dos clientes do restaurante te contratou para um evento privado e voc√™ recebeu R$${salario}!`;
}
break;
            
case "professor":
if (chance > 30) {
salario = Math.floor(Math.random() * (empregoData.salarioMax - empregoData.salarioMin)) + empregoData.salarioMin;
textoTrabalho = `Voce passou o dia inteiro aguentando um monte de crian√ßas chatas e recebeu apenas R$${salario} por isso.`;
} else if (chance > 7) {
textoTrabalho = "Sua escola estava de paralisa√ß√£o hoje ent√£o voc√™ n√£o foi trabalhar (escola p√∫blica n√©).";
} else {
salario = Math.floor(Math.random() * 300) + 350;
textoTrabalho = `Um de seus alunos precisou de uma aula de refor√ßo particular e te pagou R$${salario} por isso!`;
}
break;
            
case "engenheiro":
if (chance > 30) {
salario = Math.floor(Math.random() * (empregoData.salarioMax - empregoData.salarioMin)) + empregoData.salarioMin;
textoTrabalho = `Voce trabalhou bastante e recebeu R$${salario}.`;
} else {
textoTrabalho = "Voc√™ cometeu um erro nos seus c√°lculos e por isso n√£o ira receber nada.";
}
break;
            
case "policial":
if (chance > 30) {
salario = Math.floor(Math.random() * (empregoData.salarioMax - empregoData.salarioMin)) + empregoData.salarioMin;
textoTrabalho = `Voce prendeu mais de 10 pessoas hoje e juntando seu sal√°rio e as comiss√µes voc√™ recebeu R$${salario} por isso.`;
} else if (chance > 7) {
textoTrabalho = "Hoje era seu dia de folga.";
} else {
salario = Math.floor(Math.random() * 350) + 390;
textoTrabalho = `Voce recebeu R$${salario} para deixar um caminh√£o passar sem parar ele, voc√™ n√£o sabia do que se tratava mas aceitou.`;
}
break
            
case "advogado":
if (chance > 30) {
salario = Math.floor(Math.random() * (empregoData.salarioMax - empregoData.salarioMin)) + empregoData.salarioMin;
textoTrabalho = `Voce trabalhou duro e recebeu R$${salario} de seu cliente por isso.`;
} else if (chance > 7) {
textoTrabalho = "Voc√™ perdeu o caso, seu cliente te processou e voc√™ teve que devolver todo o valor recebido dele.";
} else {
salario = Math.floor(Math.random() * 500) + 500;
textoTrabalho = `Um presidente te contratou, e voc√™ recebeu R$${salario} por isso!`;
}
break
            
case "medico":
if (chance > 30) {
salario = Math.floor(Math.random() * (empregoData.salarioMax - empregoData.salarioMin)) + empregoData.salarioMin;
textoTrabalho = `Hoje foi um dia bem movimentado do hospital, voc√™ trabalhou muito e recebeu R$${salario} por isso.`;
} else if (chance > 7) {
textoTrabalho = "Voc√™ passou mal hoje e quem precisou ser atendido foi voc√™.";
} else {
salario = Math.floor(Math.random() * 650) + 600;
textoTrabalho = `Voce foi contratado para fazer um atendimento particular e recebeu R$${salario} por isso!`;
}
break

default:
textoTrabalho = "Esse emprego ainda n√£o teve as mensagens e os valores configurados, avise meu dono sobre isso.";
break;
}
    
if (!delay[sender]) delay[sender] = {};
delay[sender]['trabalhar'] = now + (2 * 60 * 1000);

if(!dadosUser.xpEmprego) dadosUser.xpEmprego = 0;
const xpGanho = salario > 0 ? 1 : 0.5;
dadosUser.xpEmprego += xpGanho;
    
const proximoEmprego = empregos.find(e => e.xpNecessaria > empregoData.xpNecessaria && e.xpNecessaria <= dadosUser.xpEmprego);
if (proximoEmprego) {
textoTrabalho += `\n\nQuando estava saindo do seu turno voc√™ recebeu uma liga√ß√£o, era uma proposta de emprego, agora voc√™ pode trabalhar de ${proximoEmprego.nome} ü•≥ü•≥.`;
};

await saveUser(sender, dadosUser);
if (salario > 0) await addSaldo(sender, salario);
return {message: textoTrabalho};
//DEMOREI UMA HORA PRA FAZER ESSA MERDA DE SISTEMA DE TRABALHO, SE ESSA PORRA VAZAR NUNCA PERDOAREI VOC√ä.
} catch (e) {
 console.error(e);
 return false;
}
};

//FUN√á√ÉO DE COMPRAR ITENS
async function comprarItem(sender, itemName) {
try { 
const item = itensLoja.find(i => i.nome === itemName); 
if (!item) return { message: "Este item n√£o esta dispon√≠vel na loja, digite #prefix#loja para ver os itens dispon√≠veis." };
const dadosUser = await getUser(sender);
if (!dadosUser) return false;
if (dadosUser.saldo.carteira < item.valor) return { message: "Voc√™ n√£o tem dinheiro suficiente para comprar este item.\n\n> Talvez seu dinheiro esteja no banco, para realizar uma compra √© preciso sacar o dinheiro." };
await delSaldo(sender, item.valor);
await addItem(sender, itemName);
return { message: `Voc√™ comprou um(a) ${itemName} por R$${item.valor}, o item ja esta no seu inventario.` };
} catch (e) {
console.error(e);
return false;
}};

//FUN√á√ÉO DE VENDER ITENS 
async function venderItem(sender, itemName, quantidade = 1) { 
try { 
const item = itensVenda.find(i => i.nome === itemName) || itensLoja.find(i => i.nome === itemName); 
if (!item) return { message: "Este item n√£o pode ser vendido." };
const dadosUser = await getUser(sender);
if (!dadosUser) return false;
if (!dadosUser.inventario[itemName] || dadosUser.inventario[itemName] < quantidade) return { message: `Voce nao tem ${quantidade} ${itemName}, √© imposs√≠vel realizar esta venda\n\n> Quantidade de ${itemName} no seu inventario: ${dadosUser.inventario[itemName] ? dadosUser.inventario[itemName] : 0}.` };
const ganho = item.venda * quantidade;
await addSaldo(sender, ganho);
await removeItem(sender, itemName, quantidade);
return { message: `Voc√™ vendeu ${quantidade}x ${itemName} por R$${ganho}.` };
} catch (e) {
console.error(e);
return false;
}};

//FUN√á√ÉO PARA REALIZAR PESCARIA 
async function pescar(sender) {
    try {
        const dadosUser = await getUser(sender);
        if (!dadosUser) return { message: "Usu√°rio n√£o encontrado." };

        if (!dadosUser.inventario["isca"] || dadosUser.inventario["isca"] <= 0) {
            return { message: "Voc√™ n√£o tem iscas suficientes para pescar." };
        }

        const agora = Date.now();
        if (!dadosUser.delay) dadosUser.delay = {};
        if (dadosUser.delay.pescar && agora < dadosUser.delay.pescar) {
            const restante = Math.ceil((dadosUser.delay.pescar - agora) / 1000);
            return { message: `O lago est√° muito agitado! Espere ${restante} segundos antes de pescar novamente.` };
        }

        const peixes = Math.floor(Math.random() * 11) + 5;
        
        if (!dadosUser.delay) dadosUser.delay = {};
        
        dadosUser.delay.pescar = agora + 2 * 60 * 1000; // 2 minutos de delay
        await saveUser(sender, dadosUser);
       
        await removeItem(sender, "isca", 1);
        await addItem(sender, "peixe", peixes);
        
        return { message: `üé£ Voc√™ pescou ${peixes} peixes! Parab√©ns pela pescaria!` };
    } catch (e) {
        console.error(e);
        return { message: "Ocorreu um erro durante a pescaria." };
    }
}

//FUN√á√ÉO PARA REALIZAR UMA CA√áA
async function realizarCaca(sender) {
    try {
        dadosUser = await getUser(sender);
        if (!dadosUser) return { message: "Usu√°rio n√£o encontrado." };

        if ((!dadosUser.inventario["arma"] || dadosUser.inventario["arma"] <= 0) ||
            (!dadosUser.inventario["municao"] || dadosUser.inventario["municao"] <= 0)) {
            return { message: "Voc√™ precisa de uma arma e muni√ß√£o para ca√ßar." };
        }

        const agora = Date.now();
        if (!dadosUser.delay) dadosUser.delay = {};
        if (dadosUser.delay.cacar && agora < dadosUser.delay.cacar) {
            const restante = Math.ceil((dadosUser.delay.cacar - agora) / 1000);
            return { message: `Os animais est√£o escondidos! Espere ${restante} segundos antes de tentar ca√ßar novamente.` };
        }

        const chanceDeQuebra = Math.random() < 0.2;
        const carnes = Math.floor(Math.random() * 11) + 10;

        if (chanceDeQuebra) {
            await removeItem(sender, "arma", 1);
            return { message: `Sua arma quebrou ap√≥s a ca√ßa, mas voc√™ conseguiu ${carnes} carnes!` };
        }
        
        dadosUser = await getUser(sender);
        
        if (!dadosUser.delay) dadosUser.delay = {};
                
        dadosUser.delay.cacar = agora + 4 * 60 * 1000;
        await saveUser(sender, dadosUser);
        
        await removeItem(sender, "municao", 1);
        await addItem(sender, "carne", carnes);

        return { message: `üêó Voc√™ ca√ßou e conseguiu ${carnes} carnes!` };
    } catch (e) {
        console.error(e);
        return { message: "Ocorreu um erro durante a ca√ßa." };
    }
}

//FUN√á√ÉO PARA REALIZAR UMA MINERA√á√ÉO
async function minerar(sender) {
    try {
        dadosUser = await getUser(sender);
        if (!dadosUser) return { message: "Usu√°rio n√£o encontrado." };

        if (!dadosUser.inventario.picareta || dadosUser.inventario.picareta <= 0) {
            return { message: "Voc√™ precisa de uma picareta para minerar." };
        }

        const agora = Date.now();
        if (!dadosUser.delay) dadosUser.delay = {};
        if (dadosUser.delay.minerar && agora < dadosUser.delay.minerar) {
            const restante = Math.ceil((dadosUser.delay.minerar - agora) / 1000);
            return { message: `A mina est√° fechada para manuten√ß√£o! Espere ${restante} segundos antes de tentar minerar novamente.` };
        }

        const minerios = [
            { nome: "carvao", chance: 50 },
            { nome: "ferro", chance: 30 },
            { nome: "prata", chance: 20 },
            { nome: "ouro", chance: 15 },
            { nome: "diamante", chance: 5 },
            { nome: "esmeralda", chance: 3 }
        ];
        const ganhos = [];

        for (const minerio of minerios) {
            if (Math.random() * 100 < minerio.chance) {
                const quantidade = Math.floor(Math.random() * 3) + 1;
                ganhos.push({ nome: minerio.nome, quantidade });
                await addItem(sender, minerio.nome, quantidade);
            }
        }

        if (Math.random() < 0.25) {
            await removeItem(sender, "picareta", 1);
            ganhos.push({ nome: "picareta quebrada", quantidade: 1 });
        }
        
        dadosUser = await getUser(sender);
        
        if (!dadosUser.delay) dadosUser.delay = {};
        
        dadosUser.delay.minerar = agora + 3 * 60 * 1000; // 3 minutos de delay
        await saveUser(sender, dadosUser);

        const ganhoTexto = ganhos.length
            ? ganhos.map(g => `${g.quantidade}x ${g.nome}`).join(", ")
            : "nada";
        return { message: `‚õèÔ∏è Voc√™ minerou e encontrou: ${ganhoTexto}.` };
    } catch (e) {
        console.error(e);
        return { message: "Ocorreu um erro durante a minera√ß√£o." };
    }
}

//FUN√á√ÉO PARA RENDERIZAR O INVENT√ÅRIO
async function renderizarInventario(sender) {
try {
const dadosUser = await getUser(sender);
if (!dadosUser) return false
const inventario = dadosUser.inventario;
if (!inventario || Object.keys(inventario).length === 0) return {message: "üõí *Seu invent√°rio est√° vazio.*"};
let resposta = "üì¶ *Invent√°rio* üì¶\n\n";
Object.keys(inventario).forEach(item => {
resposta += `- *${item}*: ${inventario[item]}\n`;
});
return {message: resposta.trim()};
} catch (e) {
console.error(e);
return "Erro ao renderizar o invent√°rio.";
}};

//FUN√á√ÉO PARA RENDERIZAR TODAS AS INFORMA√á√ïES DO USU√ÅRIO
async function renderizarInformacoesUsuario(sender) {
try {
const dadosUser = await getUser(sender);
if (!dadosUser) return false;
const { nome, saldo, emprego, xpEmprego, inventario } = dadosUser;
const inventarioTexto = inventario && Object.keys(inventario).length > 0 ? Object.keys(inventario).map(item => `- *${item}*: ${inventario[item]}`).join("\n") : "- Nenhum item";
const resposta = `üë§ *Informa√ß√µes do Usu√°rio*\n---------------------------------\n- *Nome*: ${nome || "Desconhecido"}\n- *Emprego*: ${emprego || "Desempregado"}\n\n- *Saldo No Banco*: ${saldo?.banco || 0} üè¶\n- *Saldo Na Carteira*: ${saldo?.carteira || 0} üíµ\n\nüì¶ *Invent√°rio*:\n${inventarioTexto}\n---------------------------------`.trim();
return {message: resposta};
} catch (e) {
console.error(e);
return false;
}};

// FUN√á√ÉO PARA REALIZAR UM ASSALTO
async function assaltar(sender, alvo) {
    try {
        const dadosUser = await getUser(sender);
        const dadosAlvo = await getUser(alvo);

        if (!dadosUser || !dadosAlvo) return { message: "Um dos usu√°rios n√£o est√° registrado no RPG." };

        if (!dadosUser.inventario.faca || dadosUser.inventario.faca < 1) {
            return { message: "Voc√™ precisa de uma faca para realizar um assalto." };
        }

        const agora = Date.now();
        if (!dadosUser.delay) dadosUser.delay = {};
        if (dadosUser.delay.assaltar && agora < dadosUser.delay.assaltar) {
            const restante = Math.ceil((dadosUser.delay.assaltar - agora) / 1000);
            return { message: `Voc√™ est√° sendo procurado pela pol√≠cia! Espere ${restante} segundos antes de tentar outro assalto.` };
        }

        if (dadosAlvo.inventario.escudo && dadosAlvo.inventario.escudo > 0) {
            if (Math.random() * 100 < 20) {
            dadosUser.delay.assaltar = agora + 5 * 60 * 1000;
            await saveUser(sender, dadosUser);
                await removeItem(alvo, "escudo", 1);
                return { message: `Seu alvo estava protegido por um escudo! O escudo quebrou, mas voc√™ n√£o conseguiu realizar o assalto.` };
            }
            dadosUser.delay.assaltar = agora + 5 * 60 * 1000;
            await saveUser(sender, dadosUser);
            return { message: "Seu alvo estava protegido por um escudo! Voc√™ n√£o conseguiu realizar o assalto." };
        }

        const chanceSucesso = Math.random() * 100;
        const dinheiroAlvo = dadosAlvo.saldo.carteira;

        if (chanceSucesso > 30) {
            const valorRoubado = Math.floor(dinheiroAlvo > 500 ? 500 : dinheiroAlvo * (Math.random() * 0.5 + 0.1));
            dadosUser.delay.assaltar = agora + 5 * 60 * 1000;
            await saveUser(sender, dadosUser);
            await addSaldo(sender, valorRoubado);
            await delSaldo(alvo, valorRoubado);
            return { message: `üí∞ Assalto bem-sucedido! Voc√™ roubou R$${valorRoubado} de ${dadosAlvo.nome}. Corra antes que a pol√≠cia chegue!` };
        } else if (chanceSucesso > 40) {
            return { message: "O alvo percebeu o assalto e conseguiu escapar! Voc√™ n√£o roubou nada desta vez." };
        } else {
            await removeItem(sender, 'faca', 1);
            return { message: "O alvo reagiu ao assalto e conseguiu tomar sua faca! Voc√™ perdeu a arma e n√£o conseguiu nada." };
        }
    } catch (e) {
        console.error(e);
        return { message: "Ocorreu um erro durante o assalto." };
    }
}

// PEDIR EM CASAMENTO
async function pedirCasamento(sender) {
    const dadosUser = await getUser(sender);

    if (!dadosUser.relacionamento) dadosUser.relacionamento = {};

    if (dadosUser.relacionamento.tipo !== "namoro") return { message: "üíç Voc√™ precisa estar em um namoro para fazer o pedido de casamento." };

    const parceiroId = dadosUser.relacionamento.parceiro;
    const dadosParceiro = await getUser(parceiroId);

    if (!dadosParceiro || !dadosParceiro.relacionamento) return { message: "Parece que houve um problema ao encontrar sua dupla. Tente novamente mais tarde." };

    const tempoNamoro = (Date.now() - dadosUser.relacionamento.inicio) / (1000 * 60 * 60 * 24);
    if (tempoNamoro < 5) return { message: "‚è≥ Voc√™ precisa estar namorando h√° pelo menos 5 dias antes de fazer o pedido de casamento." };

    dadosParceiro.relacionamento.pedido = sender;
    dadosParceiro.relacionamento.tipo = "casamento";
    await saveUser(parceiroId, dadosParceiro);

    return { message: `üíç Pedido de casamento enviado para ${dadosParceiro.nome}! Ser√° que voc√™s dar√£o o pr√≥ximo grande passo? üíï\n\n> Digite !aceitar para aceitar e !recusar para recusar` };
}

//RECUSAR PEDIDO
async function recusarPedido(sender) {
    const dadosUser = await getUser(sender);

    if (!dadosUser.relacionamento) dadosUser.relacionamento = {};

    if (!dadosUser.relacionamento.pedido) return { message: "üì≠ Voc√™ n√£o tem pedidos pendentes para recusar." };

    const parceiroId = dadosUser.relacionamento.pedido;
    const dadosParceiro = await getUser(parceiroId);

    if (dadosParceiro && dadosParceiro.relacionamento) {
        dadosParceiro.relacionamento.pedido = null;
        await saveUser(parceiroId, dadosParceiro);
    }

    dadosUser.relacionamento.pedido = null;
    await saveUser(sender, dadosUser);

    return { message: `üíî Sinto muito, ${dadosParceiro ? dadosParceiro.nome : "algu√©m"}! ${dadosUser.nome} decidiu recusar o pedido. O amor pode ser complicado √†s vezes...` };
}

// ACEITAR PEDIDO
async function aceitarPedido(sender) {
    const dadosUser = await getUser(sender);

    if (!dadosUser.relacionamento) dadosUser.relacionamento = {};

    if (!dadosUser.relacionamento.pedido) return { message: "üì≠ Voc√™ n√£o tem pedidos pendentes." };

    const parceiroId = dadosUser.relacionamento.pedido;
    const dadosParceiro = await getUser(parceiroId);

    if (!dadosParceiro) return { message: "Erro ao encontrar o remetente do pedido. Parece que ele(a) desapareceu! üò¢" };

    if (!dadosParceiro.relacionamento) dadosParceiro.relacionamento = {};

    // Verifica se o pedido √© de namoro ou casamento
    if (dadosUser.relacionamento.tipo === "casamento" && dadosParceiro.relacionamento.tipo === "namoro") {
        // Promover para casamento
        dadosUser.relacionamento.tipo = "casamento";
        dadosParceiro.relacionamento.tipo = "casamento";

        dadosUser.relacionamento.pedido = null;
        dadosParceiro.relacionamento.pedido = null;

        await saveUser(sender, dadosUser);
        await saveUser(parceiroId, dadosParceiro);

        return { message: `üíç Parab√©ns! Agora voc√™s est√£o oficialmente casados. Que a felicidade seja infinita! üéâ` };
    } else if (!dadosUser.relacionamento.parceiro) {
        // Caso seja um pedido de namoro
        dadosUser.relacionamento.parceiro = parceiroId;
        dadosUser.relacionamento.tipo = "namoro";
        dadosUser.relacionamento.inicio = Date.now();
        dadosUser.relacionamento.pedido = null;

        dadosParceiro.relacionamento.parceiro = sender;
        dadosParceiro.relacionamento.tipo = "namoro";
        dadosParceiro.relacionamento.inicio = Date.now();
        dadosParceiro.relacionamento.pedido = null;

        await saveUser(sender, dadosUser);
        await saveUser(parceiroId, dadosParceiro);

        return { message: `üåπ Parab√©ns! ${dadosParceiro.nome} aceitou seu pedido de namoro. Que voc√™s vivam muitas aventuras juntos! ü•∞` };
    }

    return { message: "Algo deu errado! Verifique o status do relacionamento e tente novamente." };
}

//VER INFORMA√á√ïES DA DUPLA
async function mostrarDupla(sender) {
    const dadosUser = await getUser(sender);

    if (!dadosUser.relacionamento || !dadosUser.relacionamento.parceiro) {
        return { message: "üì≠ Voc√™ n√£o est√° em um relacionamento no momento. Talvez seja a hora de buscar sua outra metade!" };
    }

    const parceiroId = dadosUser.relacionamento.parceiro;
    const dadosParceiro = await getUser(parceiroId);

    const inicio = new Date(dadosUser.relacionamento.inicio);
    const inicioFormatado = inicio.toLocaleString("pt-BR", { timeZone: "America/Sao_Paulo" });
    const tempoTotal = Date.now() - dadosUser.relacionamento.inicio;

    const dias = Math.floor(tempoTotal / (1000 * 60 * 60 * 24));
    const horas = Math.floor((tempoTotal % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutos = Math.floor((tempoTotal % (1000 * 60 * 60)) / (1000 * 60));
    const segundos = Math.floor((tempoTotal % (1000 * 60)) / 1000);

    return {
        message: `üíë *Informa√ß√µes do Relacionamento* üíë\n\nüë§ *Parceiro*: ${dadosParceiro.nome}\nüìÖ *In√≠cio do Namoro*: ${inicioFormatado}\n‚è≥ *Tempo Juntos*: ${dias} dias, ${horas} horas, ${minutos} minutos e ${segundos} segundos.\n\nüíç *Status*: ${dadosUser.relacionamento.tipo === "casamento" ? "Casados" : "Namorando"}`
    };
}
// REALIZAR PEDIDO DE NAMORO
async function pedirNamoro(sender, alvo) {
    const dadosUser = await getUser(sender);
    const dadosAlvo = await getUser(alvo);

    if (!dadosUser || !dadosAlvo) return { message: "Um dos usu√°rios n√£o est√° registrado no RPG." };

    if (!dadosUser.relacionamento) dadosUser.relacionamento = {};
    if (!dadosAlvo.relacionamento) dadosAlvo.relacionamento = {};

    if (dadosUser.relacionamento.parceiro) return { message: "üíî Voc√™ j√° est√° em um relacionamento! N√£o pode pedir outra pessoa em namoro." };
    if (dadosAlvo.relacionamento.parceiro) return { message: "üíî Infelizmente, essa pessoa j√° est√° em um relacionamento." };

    dadosAlvo.relacionamento.pedido = sender;
    await saveUser(alvo, dadosAlvo);

    return { message: `üíå Pedido enviado! Agora s√≥ resta esperar... Ser√° que ${dadosAlvo.nome} aceitar√° ser sua dupla? O destino decidir√°!\n\n> Digite !aceitar para aceitar e !recusar para recusar` };
}

//REALIZAR DIVORCIO
async function divorcio(sender, confirmacao) {
    if (confirmacao !== "1") return { message: "üíî Tem certeza que deseja se separar? Digite `!divorcio 1` para confirmar sua decis√£o." };

    const dadosUser = await getUser(sender);

    if (!dadosUser.relacionamento) dadosUser.relacionamento = {};

    if (!dadosUser.relacionamento.parceiro) return { message: "üì≠ Voc√™ n√£o est√° em um relacionamento para se divorciar. Talvez seja um sinal para n√£o desistir do amor! üíï" };

    const parceiroId = dadosUser.relacionamento.parceiro;
    const dadosParceiro = await getUser(parceiroId);

    if (dadosParceiro && dadosParceiro.relacionamento) {
        dadosParceiro.relacionamento = null;
        await saveUser(parceiroId, dadosParceiro);
    }

    dadosUser.relacionamento = null;
    await saveUser(sender, dadosUser);

    return { message: "üíî Que triste! O amor entre voc√™s chegou ao fim. Que voc√™s encontrem novos caminhos de felicidade." };
}

// CONSTANTES
const CUSTO_TOSA = 200;
const CUSTO_VETERINARIO = 500;

// ESTRUTURA INICIAL DO PET
const petInicial = {
    nome: "",
    tipo: "",
    fome: 50,
    felicidade: 50,
    limpeza: 50,
    saude: 50,
    ultimaAlimentacao: null,
    ultimoBanho: null,
    ultimaTosa: null,
    ultimaVisitaVeterinario: null,
    ultimaInteracao: null
};

// ATUALIZA OS ATRIBUTOS DO PET
async function atualizarAtributosPet(sender) {
    const dadosUser = await getUser(sender);
    if (!dadosUser.pet) return false;

    const pet = dadosUser.pet;
    const agora = Date.now();

    const tempoDesdeUltimaAlimentacao = pet.ultimaAlimentacao ? (agora - pet.ultimaAlimentacao) / (1000 * 60) : agora;
    const tempoDesdeUltimoBanho = pet.ultimoBanho ? (agora - pet.ultimoBanho) / (1000 * 60) : agora;
    const tempoDesdeUltimaInteracao = pet.ultimaInteracao ? (agora - pet.ultimaInteracao) / (1000 * 60) : agora;

    // Calcula deteriora√ß√£o
    const fomeDelta = tempoDesdeUltimaAlimentacao * 0.4; // Reduzida para desacelerar
    const limpezaDelta = tempoDesdeUltimoBanho * 0.2;
    const felicidadeDelta = tempoDesdeUltimaInteracao * 0.3 + pet.fome * 0.05; // Felicidade cai mais r√°pido se a fome for alta
    const saudeDelta = (100 - pet.limpeza) * 0.02 + (100 - pet.felicidade) * 0.02; // Sa√∫de cai por falta de limpeza e felicidade

    // Atualiza estados
    pet.fome = Math.min(100, pet.fome + fomeDelta);
    pet.limpeza = Math.max(0, pet.limpeza - limpezaDelta);
    pet.felicidade = Math.max(0, Math.min(100, pet.felicidade - felicidadeDelta));
    pet.saude = Math.max(0, Math.min(100, pet.saude - saudeDelta));

    pet.ultimaInteracao = agora;

    await saveUser(sender, dadosUser);
    return true;
}

// ADOTAR UM PET
async function adotarPet(sender, nome, tipo) {
    const dadosUser = await getUser(sender);

    if (!dadosUser) return { message: "‚ö†Ô∏è Voc√™ precisa estar registrado no RPG para adotar um pet." };
    if (dadosUser.pet) return { message: "‚ö†Ô∏è Voc√™ j√° possui um pet! Solte o atual antes de adotar outro." };
    if (!nome || nome.length > 15) return { message: "‚ö†Ô∏è O nome deve ter no m√°ximo 15 caracteres." };
    if (!["cachorro", "gato", "capivara"].includes(tipo.toLowerCase())) {
        return { message: "‚ö†Ô∏è Tipo de pet inv√°lido. Escolha entre *cachorro*, *gato* ou *capivara*." };
    }

    dadosUser.pet = { ...petInicial, nome, tipo: tipo.toLowerCase() };
    await saveUser(sender, dadosUser);

    return { message: `üéâ *Parab√©ns!* Voc√™ adotou um(a) ${tipo} chamado(a) *${nome}*. Cuide bem dele(a) e aproveite a companhia!` };
}

// FAZER CARINHO NO PET
async function fazerCarinho(sender) {
    const dadosUser = await getUser(sender);
    if (!dadosUser.pet) return { message: "‚ö†Ô∏è Voc√™ n√£o tem um pet. Adote um primeiro!" };

    const pet = dadosUser.pet;

    // Felicidade aumenta proporcionalmente
    pet.felicidade = Math.min(100, pet.felicidade + 15);
    pet.ultimaInteracao = Date.now();

    await saveUser(sender, dadosUser);

    return { message: `üíñ Voc√™ fez carinho em *${pet.nome}*. Ele(a) parece mais feliz e satisfeito agora!` };
}

// BRINCAR COM O PET
async function brincarPet(sender) {
    const dadosUser = await getUser(sender);
    if (!dadosUser.pet) return { message: "‚ö†Ô∏è Voc√™ n√£o tem um pet. Adote um primeiro!" };

    const pet = dadosUser.pet;

    // Reduz fome, aumenta felicidade
    pet.fome = Math.min(100, pet.fome + 15);
    pet.felicidade = Math.min(100, pet.felicidade + 20);
    pet.ultimaInteracao = Date.now();

    await saveUser(sender, dadosUser);

    return { message: `üéæ Voc√™ brincou com *${pet.nome}*. Ele(a) est√° cheio de energia, mas parece um pouco mais faminto agora!` };
}

// SOLTAR O PET
async function soltarPet(sender) {
    const dadosUser = await getUser(sender);
    if (!dadosUser.pet) return { message: "‚ö†Ô∏è Voc√™ n√£o possui um pet para soltar." };

    const pet = dadosUser.pet;
    dadosUser.pet = null;

    await saveUser(sender, dadosUser);
    return { message: `üíî Voc√™ soltou seu pet *${pet.nome}*. Ele(a) sentir√° saudades, mas est√° em boas m√£os na natureza.` };
}

// ALIMENTAR O PET
async function alimentarPet(sender) {
    const dadosUser = await getUser(sender);
    if (!dadosUser.pet) return { message: "‚ö†Ô∏è Voc√™ n√£o tem um pet. Adote um primeiro!" };

    const pet = dadosUser.pet;
    if (!dadosUser.inventario.racao || dadosUser.inventario.racao <= 0) {
        return { message: "üçΩÔ∏è Voc√™ n√£o possui *ra√ß√£o* no invent√°rio. Compre na loja para alimentar seu pet." };
    }

    pet.fome = Math.max(0, pet.fome - 20);
    pet.felicidade = Math.min(100, pet.felicidade + 10);
    pet.ultimaAlimentacao = Date.now();

    await saveUser(sender, dadosUser);
    
    await removeItem(sender, "racao", 1);

    return { message: `üçñ Voc√™ alimentou *${pet.nome}*. Ele(a) parece satisfeito e est√° mais feliz agora!` };
}

// DAR BANHO
async function darBanho(sender) {
    const dadosUser = await getUser(sender);
    if (!dadosUser.pet) return { message: "‚ö†Ô∏è Voc√™ n√£o tem um pet. Adote um primeiro!" };

    const pet = dadosUser.pet;
    pet.limpeza = 100;
    pet.ultimoBanho = Date.now();

    await saveUser(sender, dadosUser);

    return { message: `üöø Voc√™ deu um banho em *${pet.nome}*. Ele(a) est√° limpinho e muito confort√°vel agora!` };
}

// TOSAR O PET
async function tosarPet(sender) {
    const dadosUser = await getUser(sender);
    if (!dadosUser.pet) return { message: "‚ö†Ô∏è Voc√™ n√£o tem um pet. Adote um primeiro!" };

    if (dadosUser.saldo.carteira < CUSTO_TOSA) {
        return { message: "‚ö†Ô∏è Voc√™ n√£o possui saldo suficiente para pagar a tosa! (Custa R$200)." };
    }

    dadosUser.saldo.carteira -= CUSTO_TOSA;
    const pet = dadosUser.pet;

    pet.felicidade = 100;
    pet.ultimaTosa = Date.now();

    await saveUser(sender, dadosUser);

    return { message: `‚úÇÔ∏è Voc√™ levou *${pet.nome}* para tosar. Ele(a) est√° mais bonito(a) e feliz agora!` };
}

// LEVAR AO VETERIN√ÅRIO
async function levarAoVeterinario(sender) {
    const dadosUser = await getUser(sender);
    if (!dadosUser.pet) return { message: "‚ö†Ô∏è Voc√™ n√£o tem um pet. Adote um primeiro!" };

    if (dadosUser.saldo.carteira < CUSTO_VETERINARIO) {
        return { message: "‚ö†Ô∏è Voc√™ n√£o possui saldo suficiente para pagar o veterin√°rio! (Custa R$500)." };
    }

    dadosUser.saldo.carteira -= CUSTO_VETERINARIO;
    const pet = dadosUser.pet;

    pet.saude = 100;
    pet.ultimaVisitaVeterinario = Date.now();

    await saveUser(sender, dadosUser);

    return { message: `üè• Voc√™ levou *${pet.nome}* ao veterin√°rio. Ele(a) est√° saud√°vel e feliz agora!` };
}

// VER STATUS DO PET
async function verPet(sender) {
    const dadosUser = await getUser(sender);
    if (!dadosUser.pet) return { message: "‚ö†Ô∏è Voc√™ n√£o tem um pet. Adote um primeiro!" };

    const pet = dadosUser.pet;

    return {
        message: `
üêæ *Status do Pet* üêæ
- Nome: *${pet.nome}*
- Tipo: *${pet.tipo}*
- Fome: *${pet.fome.toFixed(2)}%*
- Felicidade: *${pet.felicidade.toFixed(2)}%*
- Limpeza: *${pet.limpeza.toFixed(2)}%*
- Sa√∫de: *${pet.saude.toFixed(2)}%*
        `.trim()
    };
}

// PASSEAR COM O PET
async function passearPet(sender) {
    const dadosUser = await getUser(sender);
    if (!dadosUser.pet) return { message: "‚ö†Ô∏è Voc√™ n√£o tem um pet. Adote um primeiro!" };

    const pet = dadosUser.pet;

    // Passeios aumentam felicidade e sa√∫de, mas tamb√©m consomem energia (fome aumenta)
    const felicidadeGanho = Math.max(10, 30 - pet.fome * 0.2); // Ganha menos felicidade se o pet estiver com fome
    const saudeGanho = Math.max(5, 20 - (100 - pet.limpeza) * 0.1); // Ganha menos sa√∫de se o pet estiver sujo
    const fomeGanho = 10; // Passear aumenta a fome

    pet.felicidade = Math.min(100, pet.felicidade + felicidadeGanho);
    pet.saude = Math.min(100, pet.saude + saudeGanho);
    pet.fome = Math.min(100, pet.fome + fomeGanho);
    pet.ultimaInteracao = Date.now();

    await saveUser(sender, dadosUser);

    // Mensagem personalizada
    return { 
        message: `
üèûÔ∏è Voc√™ passeou com *${pet.nome}*. 
Ele(a) est√° mais feliz (+${felicidadeGanho}%) e saud√°vel (+${saudeGanho}%), mas parece um pouco mais faminto (+${fomeGanho}%).
        `.trim()
    };
}


// Lista de frutas dispon√≠veis
const frutas = ["üçé", "üçå", "üçí", "üçá", "üçç", "üçâ"];

// Fun√ß√£o do cassino
async function cassino(sender, aposta) {
    if (!aposta || aposta < 150) {
        return { message: "‚ö†Ô∏è A aposta m√≠nima √© de R$150. Tente novamente com um valor maior ou igual." };
    }

    const dadosUser = await getUser(sender);

    if (dadosUser.saldo.carteira < aposta) {
        return { message: "‚ö†Ô∏è Voc√™ n√£o tem saldo suficiente para essa aposta." };
    }

    await delSaldo(sender, aposta);

    const rodada = [
        frutas[Math.floor(Math.random() * frutas.length)],
        frutas[Math.floor(Math.random() * frutas.length)],
        frutas[Math.floor(Math.random() * frutas.length)]
    ];

    const [f1, f2, f3] = rodada;
    let resultado = "üíî *Voc√™ perdeu!* Melhor sorte na pr√≥xima.";
    let premio = 0;
    if (Math.random() <= 0.4) {
        if (f1 === f2 && f2 === f3) {
            premio = aposta * 5;
            resultado = `üéâ *Jackpot!* Tr√™s frutas iguais: ${f1} ${f2} ${f3}\nVoc√™ ganhou R$${premio.toLocaleString()}!`;
        } else if (f1 === f2 || f2 === f3 || f1 === f3) {
            resultado = `üòê Duas frutas iguais: ${f1} ${f2} ${f3}\nVoc√™ n√£o ganhou nem perdeu nada. Tente novamente!`;
        } else {
            resultado = `üíî *Voc√™ perdeu!* As frutas foram: ${f1} ${f2} ${f3}`;
        }
    } else {
        resultado = `üíî *Voc√™ perdeu!* As frutas foram: ${f1} ${f2} ${f3}`;
    }

    if (premio > 0) {
        await addSaldo(sender, premio);
    }
    
    return { message: `${resultado}\n\nüí∞ *Saldo Atual*: R$${(dadosUser.saldo.carteira + premio)}` };
}


// Fun√ß√£o para registrar o perfil do Tinder
async function registrarTinder(sender, name, bufferFoto) {
    try {
        if (!name || !bufferFoto) {
            return { message: "‚ö†Ô∏è Nome e foto s√£o obrigat√≥rios para o registro." };
        }

        const upload = await uploadFoto(bufferFoto, sender);
        if (upload.error) return { message: upload.error };

        const dadosUser = await getUser(sender);
        dadosUser.tinder = {
            nome: name,
            foto: upload.url,
            sexo: "N√£o especificado",
            bio: "Sem bio."
        };

        await saveUser(sender, dadosUser);
        return { message: `‚úÖ Registro conclu√≠do com sucesso! Bem-vindo(a), ${name}.` };
    } catch (e) {
        console.error(e);
        return { message: "‚ùå Erro ao registrar o usu√°rio." };
    }
}

// Fun√ß√£o para editar as informa√ß√µes do perfil do Tinder
async function editarPerfil(sender, campo, valor) {
    try {
        const dadosUser = await getUser(sender);
        if (!dadosUser || !dadosUser.tinder) return { message: "‚ö†Ô∏è Voc√™ n√£o est√° registrado no Tinder." };

        switch (campo.toLowerCase()) {
            case 'nome':
                if (!valor) return { message: "‚ö†Ô∏è Nome n√£o pode ser vazio." };
                dadosUser.tinder.nome = valor;
                break;
            case 'sexo':
                dadosUser.tinder.sexo = valor || "N√£o especificado";
                break;
            case 'bio':
                dadosUser.tinder.bio = valor || "Sem bio.";
                break;
            default:
                return { message: "‚ö†Ô∏è Campo inv√°lido. Use: nome, sexo ou bio." };
        }

        await saveUser(sender, dadosUser);
        return { message: `‚úÖ ${campo.charAt(0).toUpperCase() + campo.slice(1)} atualizado com sucesso!` };
    } catch (e) {
        console.error(e);
        return { message: "‚ùå Erro ao atualizar o perfil." };
    }
}

// Fun√ß√£o para exibir o perfil pr√≥prio do Tinder
async function exibirMeuPerfil(sender) {
    try {
        const dadosUser = await getUser(sender);
        if (!dadosUser || !dadosUser.tinder) return { message: "‚ö†Ô∏è Voc√™ n√£o est√° registrado no Tinder." };

        return {
            foto: dadosUser.tinder.foto,
            message: `üë§ *Seu Perfil Tinder*\nüìÑ *Bio*: ${dadosUser.tinder.bio}\nüí¨ *Sexo*: ${dadosUser.tinder.sexo}\n\nüì± *WhatsApp*: wa.me/${dadosUser.id.split('@')[0]}`
        };
    } catch (e) {
        console.error(e);
        return { message: "‚ùå Erro ao exibir seu perfil." };
    }
}

// Fun√ß√£o para exibir um perfil aleat√≥rio com Tinder
async function exibirPerfilAleatorio(sender) {
    try {
        const dadosUser = await getUser(sender);
        if (!dadosUser || !dadosUser.tinder) return { message: "‚ö†Ô∏è Voc√™ precisa estar cadastrado no Tinder para usar este comando." };

        const arquivos = await fs.readdir(RpgPath);
        if (arquivos.length === 0) return { message: "‚ö†Ô∏è Nenhum perfil encontrado." };

        let perfilEncontrado = null;

        for (const arquivo of arquivos) {
            const userDados = JSON.parse(await fs.readFile(path.join(RpgPath, arquivo), 'utf-8'));
            if (userDados.tinder) {
                perfilEncontrado = userDados;
                break;
            }
        }

        if (!perfilEncontrado) return { message: "‚ö†Ô∏è Nenhum perfil com Tinder foi encontrado." };

        return {
            foto: perfilEncontrado.tinder.foto,
            message: `üë§ *Perfil de ${perfilEncontrado.tinder.nome}*\nüìÑ *Bio*: ${perfilEncontrado.tinder.bio}\nüí¨ *Sexo*: ${perfilEncontrado.tinder.sexo}\n\nüì± *WhatsApp*: wa.me/${perfilEncontrado.id.split('@')[0]}`
        };
    } catch (e) {
        console.error(e);
        return { message: "‚ùå Erro ao buscar um perfil aleat√≥rio." };
    }
}

// Fun√ß√£o para verificar se o usu√°rio tem Tinder antes de usar comandos
async function verificarTinder(sender) {
    const dadosUser = await getUser(sender);
    return !!(dadosUser && dadosUser.tinder);
}

// Fun√ß√£o para alterar a foto do perfil no Tinder
async function alterarFoto(sender, bufferFoto) {
    try {
        const dadosUser = await getUser(sender); // Busca os dados do usu√°rio
        if (!dadosUser || !dadosUser.tinder) {
            return { message: "‚ö†Ô∏è Voc√™ n√£o est√° registrado no Tinder." };
        }

        // Faz o upload da nova foto no GitHub
        const upload = await uploadFoto(bufferFoto, sender);
        if (upload.error) {
            return { message: upload.error };
        }

        // Atualiza a URL da foto no perfil do Tinder
        dadosUser.tinder.foto = upload.url;
        await saveUser(sender, dadosUser); // Salva as altera√ß√µes no arquivo do usu√°rio

        return { message: "‚úÖ Foto de perfil atualizada com sucesso!" };
    } catch (error) {
        console.error(error);
        return { message: "‚ùå Erro ao atualizar a foto de perfil." };
    }
}


// EXPORTS
const objectExport = Object.assign(getUser, {
    rg: rgUser,
    del: delUser,
    trabalhar: trabalhar,
    empregos: listarEmpregos,
    loja: GerarLoja,
    comprar: comprarItem,
    vender: venderItem,
    itens: renderizarInventario,
    me: renderizarInformacoesUsuario,
    cassino: cassino,
    acao: {
        minerar: minerar,
        cacar: realizarCaca,
        assaltar: assaltar,
        pescar: pescar
    },
    emprego: {
        add: entrarEmprego,
        del: sairEmprego
    },
    saldo: {
        add: addSaldo,
        del: delSaldo
    },
    banco: {
        add: addSaldoBank,
        del: delSaldoBank
    },
    inventario: {
        add: addItem,
        remove: removeItem
    },
    relacionamento: {
        namorar: pedirNamoro,
        aceitar: aceitarPedido,
        recusar: recusarPedido,
        divorciar: divorcio,
        casar: pedirCasamento,
        minhaDupla: mostrarDupla
    },
    pet: {
        atualizar: atualizarAtributosPet,
        adotar: adotarPet,
        soltar: soltarPet,
        alimentar: alimentarPet,
        banho: darBanho,
        tosar: tosarPet,
        veterinario: levarAoVeterinario,
        status: verPet,
        brincar: brincarPet,
        passear: passearPet,
        carinho: fazerCarinho
    },
    tinder: {
        registrar: registrarTinder,
        editar: editarPerfil,
        alterarFoto: alterarFoto,
        meuPerfil: exibirMeuPerfil,
        perfilAleatorio: exibirPerfilAleatorio,
        verificar: verificarTinder
    }
});



module.exports = objectExport;